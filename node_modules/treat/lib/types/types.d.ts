import { Properties } from 'csstype';
import { ThemeOrAny } from 'treat/theme';
import { SimplePseudos } from './transformCSS';
export declare type PostCSS = object;
export declare type ThemeRef = string;
declare type BasicCSSProperties = Properties<string | number>;
export interface CSSKeyframes {
    [time: string]: BasicCSSProperties;
}
export declare type CSSProperties = BasicCSSProperties & {
    '@keyframes'?: CSSKeyframes | string;
};
declare type PseudoProperties = {
    [key in SimplePseudos[number]]?: CSSProperties;
};
declare type CSSPropertiesAndPseudos = CSSProperties & PseudoProperties;
interface SelectorMap {
    [selector: string]: CSSProperties;
}
export interface MediaQueries<StyleType> {
    '@media'?: {
        [query: string]: StyleType;
    };
}
export interface FeatureQueries<StyleType> {
    '@supports'?: {
        [query: string]: StyleType;
    };
}
export interface StyleWithSelectors extends CSSPropertiesAndPseudos {
    selectors?: SelectorMap;
}
export declare type Style = StyleWithSelectors & MediaQueries<StyleWithSelectors> & FeatureQueries<StyleWithSelectors>;
export declare type GlobalStyle = CSSProperties & MediaQueries<CSSProperties> & FeatureQueries<CSSProperties>;
export declare type StyleMap<StyleName extends string | number, StyleType> = Record<StyleName, StyleType>;
export declare type ThemedStyle<StyleType, Theme> = ((theme: Theme) => StyleType) | StyleType;
export interface TreatTheme<Tokens> {
    themeRef: ThemeRef;
    tokens: Tokens;
}
export declare type ClassRef = string;
export declare type StylesMap<StyleName extends string | number> = Record<StyleName, ClassRef>;
declare type TreatModuleValue = string | number | boolean | null | undefined | TreatModuleObject | TreatModuleArray;
interface TreatModuleObject {
    [index: string]: TreatModuleValue;
    [index: number]: TreatModuleValue;
}
interface TreatModuleArray extends Array<TreatModuleValue> {
}
export declare type TreatModule = TreatModuleObject | TreatModuleArray;
export interface WebpackTreat {
    addLocalCss: (css: object) => void;
    addThemedCss: (themeRef: ThemeRef, css: object) => void;
    addTheme: (theme: TreatTheme<ThemeOrAny>) => void;
    getThemes: () => Array<TreatTheme<ThemeOrAny>>;
    getIdentName: (local: string, scopeId: number, theme?: ThemeOrAny) => string;
}
export {};
