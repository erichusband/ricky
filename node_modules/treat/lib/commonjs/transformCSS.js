"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = __importDefault(require("lodash/merge"));
var mapKeys_1 = __importDefault(require("lodash/mapKeys"));
var each_1 = __importDefault(require("lodash/each"));
var pickBy_1 = __importDefault(require("lodash/pickBy"));
var omit_1 = __importDefault(require("lodash/omit"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
var validateSelector_1 = require("./validateSelector");
exports.simplePseudos = [
    ':-moz-any-link',
    ':-moz-full-screen',
    ':-moz-placeholder',
    ':-moz-read-only',
    ':-moz-read-write',
    ':-ms-fullscreen',
    ':-ms-input-placeholder',
    ':-webkit-any-link',
    ':-webkit-full-screen',
    '::-moz-placeholder',
    '::-moz-progress-bar',
    '::-moz-range-progress',
    '::-moz-range-thumb',
    '::-moz-range-track',
    '::-moz-selection',
    '::-ms-backdrop',
    '::-ms-browse',
    '::-ms-check',
    '::-ms-clear',
    '::-ms-fill',
    '::-ms-fill-lower',
    '::-ms-fill-upper',
    '::-ms-reveal',
    '::-ms-thumb',
    '::-ms-ticks-after',
    '::-ms-ticks-before',
    '::-ms-tooltip',
    '::-ms-track',
    '::-ms-value',
    '::-webkit-backdrop',
    '::-webkit-input-placeholder',
    '::-webkit-progress-bar',
    '::-webkit-progress-inner-value',
    '::-webkit-progress-value',
    '::-webkit-slider-runnable-track',
    '::-webkit-slider-thumb',
    '::after',
    '::backdrop',
    '::before',
    '::cue',
    '::first-letter',
    '::first-line',
    '::grammar-error',
    '::placeholder',
    '::selection',
    '::spelling-error',
    ':active',
    ':after',
    ':any-link',
    ':before',
    ':blank',
    ':checked',
    ':default',
    ':defined',
    ':disabled',
    ':empty',
    ':enabled',
    ':first',
    ':first-child',
    ':first-letter',
    ':first-line',
    ':first-of-type',
    ':focus',
    ':focus-visible',
    ':focus-within',
    ':fullscreen',
    ':hover',
    ':in-range',
    ':indeterminate',
    ':invalid',
    ':last-child',
    ':last-of-type',
    ':left',
    ':link',
    ':only-child',
    ':only-of-type',
    ':optional',
    ':out-of-range',
    ':placeholder-shown',
    ':read-only',
    ':read-write',
    ':required',
    ':right',
    ':root',
    ':scope',
    ':target',
    ':valid',
    ':visited',
];
var simplePseudoSet = new Set(exports.simplePseudos);
var normalizeStyles = function (className, styles) {
    var _a;
    var omitThese = exports.simplePseudos.concat(['@media', '@supports', 'selectors']);
    var pseudoStyles = mapKeys_1.default(pickBy_1.default(styles, function (_, key) { return simplePseudoSet.has(key); }), function (_, pseudo) { return "" + className + pseudo; });
    var selectorStyles = {};
    if (styles.selectors) {
        selectorStyles = mapKeys_1.default(styles.selectors, function (_, selector) {
            // Themed selectors can be empty if themes haven't registered yet.
            // In this case don't validate the selector
            if (selector.length > 0) {
                validateSelector_1.validateSelector(selector);
            }
            return selector.replace(RegExp('&', 'g'), className);
        });
    }
    var rawRules = omit_1.default(styles, omitThese);
    var rawStyles = Object.keys(rawRules).length > 0
        ? (_a = {},
            _a[className] = rawRules,
            _a) : {};
    var allStyles = Object.assign(rawStyles, pseudoStyles, selectorStyles);
    Object.keys(allStyles).forEach(function (ident) {
        if (allStyles[ident]['@keyframes']) {
            var _a = allStyles[ident], keyframeRef = _a["@keyframes"], animation = _a.animation;
            if (keyframeRef) {
                Object.assign(allStyles[ident], {
                    animation: animation
                        ? animation.replace('@keyframes', keyframeRef)
                        : undefined,
                    animationName: animation ? undefined : keyframeRef,
                    '@keyframes': undefined,
                });
            }
        }
    });
    return allStyles;
};
exports.default = (function (styles) {
    var stylesheet = {};
    var responsiveStylesheet = {};
    Object.entries(styles).forEach(function (_a) {
        var className = _a[0], styles = _a[1];
        var defaultStyles = normalizeStyles(className, styles);
        var responsiveStyles = {};
        if (styles['@media']) {
            each_1.default(styles['@media'], function (mediaStyles, query) {
                var _a;
                var blockStyles = normalizeStyles(className, mediaStyles);
                if (!isEqual_1.default(defaultStyles, blockStyles)) {
                    merge_1.default(responsiveStyles, (_a = {},
                        _a["@media " + query] = blockStyles,
                        _a));
                }
            });
        }
        if (styles['@supports']) {
            each_1.default(styles['@supports'], function (mediaStyles, query) {
                var _a;
                var blockStyles = normalizeStyles(className, mediaStyles);
                if (!isEqual_1.default(defaultStyles, blockStyles)) {
                    merge_1.default(responsiveStyles, (_a = {},
                        _a["@supports " + query] = blockStyles,
                        _a));
                }
            });
        }
        merge_1.default(stylesheet, defaultStyles);
        merge_1.default(responsiveStylesheet, responsiveStyles);
    });
    return Object.assign(stylesheet, responsiveStylesheet);
});
