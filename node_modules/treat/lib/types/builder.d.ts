import { ThemeOrAny } from 'treat/theme';
import { ClassRef, Style, GlobalStyle, StylesMap, ThemeRef, ThemedStyle, StyleMap } from './types';
export declare function style(style: ThemedStyle<Style, ThemeOrAny>, localDebugName?: string): ClassRef;
declare type StyleMapParam<StyleName extends string | number> = ThemedStyle<StyleMap<StyleName, Style>, ThemeOrAny>;
export declare function styleMap<StyleName extends string | number>(stylesheet: StyleMapParam<StyleName>, localDebugName?: string): StylesMap<StyleName>;
export declare function createTheme(tokens: ThemeOrAny, localDebugName?: string): ThemeRef;
export declare function globalStyle(selector: string, style: ThemedStyle<GlobalStyle, ThemeOrAny>): void;
declare type MakeStyleTree<ReturnType> = (theme: ThemeOrAny, styleNode: (style: Style, localDebugName?: string) => ClassRef) => ReturnType;
export declare function styleTree<ReturnType>(makeStyleTree: MakeStyleTree<ReturnType>): ReturnType;
export {};
