import mapKeys from 'lodash/mapKeys';
import flatMap from 'lodash/flatMap';
import uniq from 'lodash/uniq';
import { convertToCssClass, themePlaceholder, makeThemedClassReference, } from './utils';
var localClassRefs = [];
export var isThemedSelector = function (selector) {
    return selector.indexOf(themePlaceholder) > -1;
};
export var addLocalClassRef = function (classRef) {
    return localClassRefs.push(classRef);
};
export var interpolateSelector = function (selector, themeRef) {
    var normalisedSelector = selector;
    if (localClassRefs.length > 0) {
        var localClassRefsRegex = RegExp("(" + localClassRefs.join('|') + ")", 'g');
        normalisedSelector = normalisedSelector.replace(localClassRefsRegex, function (_, match) {
            return convertToCssClass(match);
        });
    }
    var themeClassRefsRegex = RegExp("\\" + themePlaceholder + "([a-zA-Z0-9_-]+)", 'g');
    return normalisedSelector.replace(themeClassRefsRegex, function (_, match) {
        if (!themeRef) {
            throw new Error("No theme ref provided to 'interpolateSelector'");
        }
        return convertToCssClass(makeThemedClassReference(themeRef, match));
    });
};
export var combinedThemeSelector = function (selector, themes) {
    if (isThemedSelector(selector)) {
        return uniq(flatMap(selector.split(','), function (selectorPart) {
            return themes.map(function (_a) {
                var themeRef = _a.themeRef;
                return interpolateSelector(selectorPart.trim(), themeRef);
            });
        })).join(', ');
    }
    return interpolateSelector(selector);
};
export var processSelectors = function (_a) {
    var style = _a.style, themeRef = _a.themeRef, themes = _a.themes;
    if (style.selectors) {
        style.selectors = mapKeys(style.selectors, function (_valid, key) {
            return themeRef
                ? interpolateSelector(key, themeRef)
                : combinedThemeSelector(key, themes);
        });
    }
    var media = style['@media'];
    if (media) {
        Object.keys(media).forEach(function (mediaQuery) {
            processSelectors({
                style: media[mediaQuery],
                themeRef: themeRef,
                themes: themes,
            });
        });
    }
};
