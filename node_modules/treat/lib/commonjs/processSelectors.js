"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mapKeys_1 = __importDefault(require("lodash/mapKeys"));
var flatMap_1 = __importDefault(require("lodash/flatMap"));
var uniq_1 = __importDefault(require("lodash/uniq"));
var utils_1 = require("./utils");
var localClassRefs = [];
exports.isThemedSelector = function (selector) {
    return selector.indexOf(utils_1.themePlaceholder) > -1;
};
exports.addLocalClassRef = function (classRef) {
    return localClassRefs.push(classRef);
};
exports.interpolateSelector = function (selector, themeRef) {
    var normalisedSelector = selector;
    if (localClassRefs.length > 0) {
        var localClassRefsRegex = RegExp("(" + localClassRefs.join('|') + ")", 'g');
        normalisedSelector = normalisedSelector.replace(localClassRefsRegex, function (_, match) {
            return utils_1.convertToCssClass(match);
        });
    }
    var themeClassRefsRegex = RegExp("\\" + utils_1.themePlaceholder + "([a-zA-Z0-9_-]+)", 'g');
    return normalisedSelector.replace(themeClassRefsRegex, function (_, match) {
        if (!themeRef) {
            throw new Error("No theme ref provided to 'interpolateSelector'");
        }
        return utils_1.convertToCssClass(utils_1.makeThemedClassReference(themeRef, match));
    });
};
exports.combinedThemeSelector = function (selector, themes) {
    if (exports.isThemedSelector(selector)) {
        return uniq_1.default(flatMap_1.default(selector.split(','), function (selectorPart) {
            return themes.map(function (_a) {
                var themeRef = _a.themeRef;
                return exports.interpolateSelector(selectorPart.trim(), themeRef);
            });
        })).join(', ');
    }
    return exports.interpolateSelector(selector);
};
exports.processSelectors = function (_a) {
    var style = _a.style, themeRef = _a.themeRef, themes = _a.themes;
    if (style.selectors) {
        style.selectors = mapKeys_1.default(style.selectors, function (_valid, key) {
            return themeRef
                ? exports.interpolateSelector(key, themeRef)
                : exports.combinedThemeSelector(key, themes);
        });
    }
    var media = style['@media'];
    if (media) {
        Object.keys(media).forEach(function (mediaQuery) {
            exports.processSelectors({
                style: media[mediaQuery],
                themeRef: themeRef,
                themes: themes,
            });
        });
    }
};
